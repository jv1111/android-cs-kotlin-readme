//SEPERATE CLASS APPROACH IS WRITTEN BELOW
//Manifest
    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE"/>
    <uses-permission android:name="android.permission.POST_NOTIFICATIONS"/>
    <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>
	
	<service android:name=".service.floatingService.ServiceFloatingWindow" android:foregroundServiceType="connectedDevice"/>
//Manifest full code
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE"/>
    <uses-permission android:name="android.permission.POST_NOTIFICATIONS"/>
    <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.RevbotOnlinePro2"
        android:usesCleartextTraffic="true"
        tools:targetApi="31">
        <activity
            android:name=".view.activities.RegisterActivity"
            android:exported="false" />
        <activity
            android:name=".view.activities.LoginActivity"
            android:exported="false" />
        <activity
            android:name=".view.activities.SplashActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity
            android:name=".view.activities.MainActivity"
            android:exported="false" />
        <service android:name=".service.floatingService.ServiceFloatingWindow" android:foregroundServiceType="connectedDevice"/>

        <meta-data
            android:name="preloaded_fonts"
            android:resource="@array/preloaded_fonts" />
    </application>

</manifest>

first create a foreground service, check in on foreground service tutorial and modify the code

//FLOATING_LAYOUT.xml
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/floatingLayout"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_centerHorizontal="true"
    android:layout_margin="30dp">

    <TextView
        android:id="@+id/tvWidget"
        android:layout_width="120dp"
        android:layout_height="120dp"
        android:textSize="22dp"
        android:text="10"
        android:textStyle="bold"
        android:gravity="center"
        android:textColor="@color/text_color"
        android:background="@color/background_color"/>

</RelativeLayout>

//SERVICE.KT
import android.app.Service
import android.content.Intent
import android.os.IBinder
import android.util.Log
import com.example.revbotonlinepro2.utils.FloatingWindowHelper

class ServiceFloatingWindow : Service() {

    private lateinit var floatingWindowHelper: FloatingWindowHelper

    companion object {
        var isServiceRunning = false
    }

    enum class Actions{
        START, STOP
    }

    override fun onBind(intent: Intent?): IBinder? {
        return null
    }

   private fun start(){
       Log.i("myTag, ","startFunction")
       floatingWindowHelper = FloatingWindowHelper(this)
       floatingWindowHelper.startFloatingWindow()
       isServiceRunning = true;
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.i("myTag", "onstartcommand")
        Log.i("myTag", intent?.action.toString())
        when(intent?.action){
            Actions.START.toString() -> start()
            Actions.STOP.toString() -> stopSelf()
        }
        return super.onStartCommand(intent, flags, startId)
    }

    override fun onDestroy() {
        super.onDestroy()
        isServiceRunning = false
        floatingWindowHelper.removeFloatingWindow()
    }
}

//FloatingWindowHelper
import android.annotation.SuppressLint
import android.app.Service
import android.content.Context
import android.graphics.PixelFormat
import android.os.Build
import android.util.Log
import android.view.Gravity
import android.view.LayoutInflater
import android.view.MotionEvent
import android.view.View
import android.view.WindowManager
import android.widget.ImageView
import android.widget.RelativeLayout
import android.widget.TextView
import com.example.revbotonlinepro2.R
import org.w3c.dom.Text

class FloatingWindowHelper(private val context: Context) {
    //---------
    private var LAYOUT_FLAG: Int? = null
    private lateinit var mFloatingView: View
    private lateinit var windowManager: WindowManager
    private lateinit var imageClose: ImageView
    private lateinit var floatingViewLayout: RelativeLayout
    private var isMoved = false
    private val movementThreshold  = 10
    //-------
    private lateinit var tvWidget: TextView

    private fun setupLayout(){
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            LAYOUT_FLAG = WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY
        } else {
            LAYOUT_FLAG = WindowManager.LayoutParams.TYPE_PHONE
        }
    }

    private fun setupLayoutParams() : WindowManager.LayoutParams{
        return WindowManager.LayoutParams(
            WindowManager.LayoutParams.WRAP_CONTENT,
            WindowManager.LayoutParams.WRAP_CONTENT,
            LAYOUT_FLAG!!,
            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
            PixelFormat.TRANSLUCENT
        )
    }

    private fun setLayoutParamsPosition(layoutParams: WindowManager.LayoutParams, x: Int, y :Int){
        layoutParams.gravity = Gravity.TOP or Gravity.RIGHT
        layoutParams.x = x
        layoutParams.y = y
    }

    private fun createDraggableClose() : ImageView{
        imageClose = ImageView(context)
        imageClose.setImageResource(R.drawable.baseline_close_24)
        imageClose.visibility = View.INVISIBLE

        return imageClose
    }

    private fun getCloseParams() : WindowManager.LayoutParams{
        val imageParams = WindowManager.LayoutParams(
            140,
            140,
            LAYOUT_FLAG!!,
            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
            PixelFormat.TRANSLUCENT
        )
        imageParams.gravity = Gravity.BOTTOM or Gravity.CENTER
        imageParams.y = 100
        return imageParams
    }

    private fun setupViewData(){
        floatingViewLayout = mFloatingView.findViewById(R.id.floatingLayout)
        tvWidget = mFloatingView.findViewById(R.id.tvWidget)

        tvWidget.text = "running"
    }

    @SuppressLint("ClickableViewAccessibility")
    private fun setupDraggableFunction(floatingViewLayout: TextView ,floatingLayoutParams: WindowManager.LayoutParams){

        val height = windowManager.defaultDisplay.height
        //val width = windowManager.defaultDisplay.width

        floatingViewLayout.setOnTouchListener(object : View.OnTouchListener {
            var initialX = 0
            var initialY = 0
            var initialTouchX: Float = 0.0f
            var initialTouchY: Float = 0.0f
            override fun onTouch(v: View, event: MotionEvent): Boolean {
                when (event.action) {
                    MotionEvent.ACTION_DOWN -> {
                        imageClose.visibility = View.VISIBLE
                        initialX = floatingLayoutParams.x
                        initialY = floatingLayoutParams.y

                        // touch position
                        initialTouchX = event.rawX
                        initialTouchY = event.rawY

                        return true
                    }

                    MotionEvent.ACTION_UP -> {
                        imageClose.visibility = View.GONE
                        floatingLayoutParams.x = initialX + (initialTouchX - event.rawX).toInt()
                        floatingLayoutParams.y = initialY + (event.rawY - initialTouchY).toInt()

                        // remove widget
                        if (floatingLayoutParams.y > (height * 0.6)) {
                            (context as Service).stopSelf()
                        }
                        //touch event
                        if(!isMoved){
                            Log.i("myTag", "tapped")
                        }
                        isMoved = false

                        return true
                    }

                    MotionEvent.ACTION_MOVE -> {
                        // calculate x and y coordinates
                        val deltaX = (initialTouchX-event.getRawX()).toInt()
                        val deltaY = (event.getRawY()-initialTouchY).toInt()
                        floatingLayoutParams.x = initialX + deltaX
                        floatingLayoutParams.y = initialY + deltaY

                        //TODO SAVE TO TXT (DONT CHANGE ALL TXT, JUST UP TO THE TOUCH FUNCTION)

                        // update layout with view coordinates
                        windowManager.updateViewLayout(mFloatingView, floatingLayoutParams)
                        if (floatingLayoutParams.y > (height * 0.6)) {
                            imageClose.setImageResource(R.drawable.baseline_close_red_24)
                        } else {
                            imageClose.setImageResource(R.drawable.baseline_close_24)
                        }

                        if(Math.abs(deltaX) > movementThreshold || Math.abs(deltaY) > movementThreshold) isMoved = true
                        //TODO TEST
                        return true
                    }
                }
                return false
            }
        })
    }

    fun startFloatingWindow() {

        setupLayout()

        // Inflate the floating layout
        mFloatingView = LayoutInflater.from(context).inflate(R.layout.floating_layout, null)
        val floatingLayoutParams = setupLayoutParams()
        setLayoutParamsPosition(floatingLayoutParams, 0, 100)

        imageClose = createDraggableClose()
        windowManager = context.getSystemService(Context.WINDOW_SERVICE) as WindowManager
        windowManager.addView(imageClose, getCloseParams())
        windowManager.addView(mFloatingView, floatingLayoutParams)
        mFloatingView.visibility = View.VISIBLE

        setupViewData()
        setupDraggableFunction(tvWidget, floatingLayoutParams)
    }

    //TODO ADD A TAP FUNCTION

    fun removeFloatingWindow(){
        if(mFloatingView!=null){
            windowManager.removeView(mFloatingView)
        }
        if(imageClose!=null){
            windowManager.removeView(imageClose)
        }
    }
}

//FLOATING WINDOW HELPER WITH MAXIMIZE AND MINIMIZE
package com.example.flasherrelay.utils

import android.annotation.SuppressLint
import android.app.Service
import android.content.Context
import android.graphics.PixelFormat
import android.os.Build
import android.util.Log
import android.view.Gravity
import android.view.LayoutInflater
import android.view.MotionEvent
import android.view.View
import android.view.WindowManager
import android.view.WindowManager.LayoutParams
import android.widget.ImageView
import android.widget.LinearLayout
import android.widget.RelativeLayout
import android.widget.TextView
import com.example.flasherrelay.R
import kotlin.properties.Delegates

class FloatingWindowHelper(private val context: Context) {
    //---------
    private var LAYOUT_FLAG: Int? = null
    private lateinit var mFloatingView: View
    private lateinit var windowManager: WindowManager
    private lateinit var imageClose: ImageView
    private var isMoved = false
    private val movementThreshold  = 10
    //-------
    private var isMaximized = false
    private lateinit var floatingViewLayout: RelativeLayout
    private lateinit var imgMaximize: ImageView
    private lateinit var layoutMaximized: LinearLayout
    private var screenSizeHelper = ScreenSizeHelper()
    private val closingStartingYFromBottom = 100
    //val width = windowManager.defaultDisplay.width

    private fun setupLayout(){
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            LAYOUT_FLAG = WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY
        } else {
            LAYOUT_FLAG = WindowManager.LayoutParams.TYPE_PHONE
        }
    }

    private fun setupLayoutParams() : WindowManager.LayoutParams{
        return WindowManager.LayoutParams(
            WindowManager.LayoutParams.WRAP_CONTENT,
            WindowManager.LayoutParams.WRAP_CONTENT,
            LAYOUT_FLAG!!,
            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
            PixelFormat.TRANSLUCENT
        )
    }

    private fun setLayoutParamsPosition(layoutParams: WindowManager.LayoutParams, x: Int, y :Int){
        layoutParams.gravity = Gravity.TOP or Gravity.RIGHT
        layoutParams.x = x
        layoutParams.y = y
    }

    private fun createDraggableClose() : ImageView{
        imageClose = ImageView(context)
        imageClose.setImageResource(R.drawable.baseline_close_24)
        imageClose.visibility = View.INVISIBLE

        return imageClose
    }

    private fun getCloseParams() : WindowManager.LayoutParams{
        val imageParams = WindowManager.LayoutParams(
            140,
            140,
            LAYOUT_FLAG!!,
            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
            PixelFormat.TRANSLUCENT
        )
        imageParams.gravity = Gravity.BOTTOM or Gravity.CENTER
        imageParams.y = closingStartingYFromBottom
        return imageParams
    }

    private fun setupViewData(){
        floatingViewLayout = mFloatingView.findViewById(R.id.floatingLayout)
        layoutMaximized = mFloatingView.findViewById(R.id.layoutMaximized)
        imgMaximize = mFloatingView.findViewById(R.id.imgMaximize)
    }

    private fun maximizeMinimizeHandler(){
        if(isMaximized){
            imgMaximize.visibility = View.VISIBLE
            layoutMaximized.visibility = View.GONE
            isMaximized = false
        }else{
            imgMaximize.visibility = View.GONE
            layoutMaximized.visibility = View.VISIBLE
            isMaximized = true
        }
    }

    private fun exitPointHandler(elementLayoutParams: LayoutParams) : Boolean{
        val exitPoint = screenSizeHelper.getMaxHeight(windowManager) - (closingStartingYFromBottom + (imageClose.height/2))
        val elementTookUpHeight = elementLayoutParams.y + floatingViewLayout.height
        return elementTookUpHeight > exitPoint
    }

    @SuppressLint("ClickableViewAccessibility")
    private fun setupDraggableFunction(floatingViewLayout: RelativeLayout ,floatingLayoutParams: WindowManager.LayoutParams, floatView: View){

        floatingViewLayout.setOnTouchListener(object : View.OnTouchListener {
            var initialX = 0
            var initialY = 0
            var initialTouchX: Float = 0.0f
            var initialTouchY: Float = 0.0f
            override fun onTouch(v: View, event: MotionEvent): Boolean {
                when (event.action) {
                    MotionEvent.ACTION_DOWN -> {
                        imageClose.visibility = View.VISIBLE
                        initialX = floatingLayoutParams.x
                        initialY = floatingLayoutParams.y

                        // touch position
                        initialTouchX = event.rawX
                        initialTouchY = event.rawY

                        return true
                    }

                    MotionEvent.ACTION_UP -> {
                        imageClose.visibility = View.GONE
                        floatingLayoutParams.x = initialX + (initialTouchX - event.rawX).toInt()
                        floatingLayoutParams.y = initialY + (event.rawY - initialTouchY).toInt()

                        if (exitPointHandler(floatingLayoutParams)) {
                            (context as Service).stopSelf()
                        }

                        if(!isMoved){
                            maximizeMinimizeHandler()
                        }
                        isMoved = false

                        return true
                    }

                    MotionEvent.ACTION_MOVE -> {
                        // calculate x and y coordinates
                        val deltaX = (initialTouchX-event.getRawX()).toInt()
                        val deltaY = (event.getRawY()-initialTouchY).toInt()
                        floatingLayoutParams.x = initialX + deltaX
                        floatingLayoutParams.y = initialY + deltaY

                        // update layout with view coordinates
                        windowManager.updateViewLayout(floatView, floatingLayoutParams)
                        if (exitPointHandler(floatingLayoutParams)) {
                            imageClose.setImageResource(R.drawable.baseline_close_red_24)
                        } else {
                            imageClose.setImageResource(R.drawable.baseline_close_24)
                        }

                        if(Math.abs(deltaX) > movementThreshold || Math.abs(deltaY) > movementThreshold) isMoved = true
                        return true
                    }
                }
                return false
            }
        })
    }

    fun startFloatingWindow() {

        setupLayout()

        // Inflate the floating layout
        mFloatingView = LayoutInflater.from(context).inflate(R.layout.floating_control, null)
        val floatingLayoutParams = setupLayoutParams()
        setLayoutParamsPosition(floatingLayoutParams, 0, 0)

        imageClose = createDraggableClose()
        windowManager = context.getSystemService(Context.WINDOW_SERVICE) as WindowManager
        windowManager.addView(imageClose, getCloseParams())
        windowManager.addView(mFloatingView, floatingLayoutParams)

        setupViewData()
        setupDraggableFunction(floatingViewLayout, floatingLayoutParams, mFloatingView)
    }

    fun removeFloatingWindow(){
        if(mFloatingView!=null){
            windowManager.removeView(mFloatingView)
        }
        if(imageClose!=null){
            windowManager.removeView(imageClose)
        }
    }
}

//ScreenSizeHelper
import android.util.DisplayMetrics
import android.util.Log
import android.view.WindowManager

class ScreenSizeHelper {
    fun getMaxHeight(windowManager: WindowManager) : Int{
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            // Use WindowMetrics API for Android 11 and above
            val windowMetrics = windowManager.currentWindowMetrics
            val insets = windowMetrics.windowInsets
            val insetsIgnoringVisibility = insets.getInsetsIgnoringVisibility(WindowInsets.Type.systemBars())
            val bounds = windowMetrics.bounds
            bounds.height() - insetsIgnoringVisibility.top - insetsIgnoringVisibility.bottom
        } else {
            // Use DisplayMetrics for older versions
            val displayMetrics = DisplayMetrics()
            @Suppress("DEPRECATION")
            windowManager.defaultDisplay.getMetrics(displayMetrics)
            displayMetrics.heightPixels
        }
    }
}

//Activity
	import android.annotation.SuppressLint
	import android.os.Build
	import androidx.appcompat.app.AppCompatActivity
	import android.os.Bundle
	import android.view.MotionEvent
	import androidx.core.app.ActivityCompat
	import android.Manifest
	import android.content.Intent
	import android.net.Uri
	import android.provider.Settings
	import android.util.Log
	import android.widget.Toast
	import com.example.revbotonlinepro2.databinding.ActivityMainBinding
	import com.example.revbotonlinepro2.service.floatingService.ServiceFloatingWindow
	import com.example.revbotonlinepro2.utils.AnimationHelper
	...
	private fun startFloatingMessenger(){
			if(!Settings.canDrawOverlays(this@MainActivity)){
				getFloatingWindowPermission()
			}else{
				if(!ServiceFloatingWindow.isServiceRunning){
					Log.i("myTag", "starting the service")
					Intent(applicationContext, ServiceFloatingWindow::class.java).also {
						it.action = ServiceFloatingWindow.Actions.START.toString()
						startService(it)
					}
				}
			}
		}

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if(requestCode==1)
        {
            if(!Settings.canDrawOverlays(this@MainActivity)){
                Toast.makeText(this, "Permission denied by user", Toast.LENGTH_LONG).show()
            }
        }
    }
	
	private fun getFloatingWindowPermission(){
			//for the floating window
			if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){
				val intent = Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse("package:$packageName"))
				startActivityForResult(intent, 1)
			}
		}
	
	    private fun stopFloatingMessenger(){
        Intent(this@MainActivity, ServiceFloatingWindow::class.java).also {
            it.action = ServiceFloatingWindow.Actions.STOP.toString()
            startService(it)
        }
    }
	...
				
				
//enable permission using switch
class YourFragment : Fragment() {

    private lateinit var swFloatingControl: Switch

    // ... Other fragment code ...

    private fun getFloatingWindowPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            val intent = Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse("package:${requireActivity().packageName}"))
            startActivityForResult(intent, 1)
        }
    }

    private fun hasOverlayPermission(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            Settings.canDrawOverlays(requireContext())
        } else {
            true // Permissions are not required before Android M
        }
    }

    // ... Other fragment code ...

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        swFloatingControl = view.findViewById(R.id.swFloatingControl)

        // Set the initial state of the switch based on permission status
        swFloatingControl.isChecked = hasOverlayPermission()

        swFloatingControl.setOnCheckedChangeListener { _, isChecked ->
            if (isChecked) {
                if (!hasOverlayPermission()) {
                    getFloatingWindowPermission()
                } else {
                    // Permission is already granted, perform your desired action here
                }
            } else {
                // Handle turning off the floating window feature
            }
        }
    }

    // ... Other fragment code ...

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == 1) {
            // Check if the user granted the permission
            if (hasOverlayPermission()) {
                // Permission granted, perform your desired action
                swFloatingControl.isChecked = true // Enable the switch
            } else {
                // Permission not granted, handle this situation accordingly
                swFloatingControl.isChecked = false // Disable the switch
            }
        }
    }
}

//or simply
private fun getFloatingWindowPermission(){
        //for the floating window
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){
            val intent = Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse("package:${requireActivity().packageName}"))
            startActivityForResult(intent, 1)
        }
    }

    private fun hasOverlayPermission(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            Settings.canDrawOverlays(requireContext())
        } else {
            true // Permissions are not required before Android M
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == 1) {
            // Check if the user granted the permission
            Log.i(tag, "on activity result")
            Log.i(tag, "has overlay ${hasOverlayPermission()}")
            binding.swFloatingControl.isChecked = hasOverlayPermission()
        }
    }
	
	
package com.example.smartkeyv3.service.FloatingWindow

import android.annotation.SuppressLint
import android.app.Service
import android.content.Context
import android.graphics.PixelFormat
import android.os.Build
import android.util.Log
import android.view.Gravity
import android.view.LayoutInflater
import android.view.MotionEvent
import android.view.View
import android.view.WindowManager
import android.widget.RelativeLayout
import com.example.smartkeyv3.R

class FloatingControl(private val context: Context) {

    private val tag = "myTag FloatingControl"
    private var LAYOUT_FLAG: Int? = null
    private var floatingToggle: View? = null
    private lateinit var windowManager: WindowManager

    @SuppressLint("ClickableViewAccessibility")
    fun startFloatingWindow() {
        //setup proper flag for different android versions
        LAYOUT_FLAG = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY
        } else {
            WindowManager.LayoutParams.TYPE_PHONE
        }

        //inflate
        floatingToggle = LayoutInflater.from(context).inflate(R.layout.floating_toggle, null)
        val floatingLayoutParams = WindowManager.LayoutParams(
            WindowManager.LayoutParams.WRAP_CONTENT,
            WindowManager.LayoutParams.WRAP_CONTENT,
            LAYOUT_FLAG!!,
            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
            PixelFormat.TRANSLUCENT
        )

        //initial position
        floatingLayoutParams.gravity = Gravity.TOP or Gravity.RIGHT
        floatingLayoutParams.x = 0
        floatingLayoutParams.y = 100

        windowManager = context.getSystemService(Service.WINDOW_SERVICE) as WindowManager
        windowManager.addView(floatingToggle, floatingLayoutParams)

        val height = windowManager.defaultDisplay.height
        val width = windowManager.defaultDisplay.width

        val control = floatingToggle!!.findViewById<RelativeLayout>(R.id.floatingControlLayout)

        control.setOnTouchListener(
            object : View.OnTouchListener {
                var initialX = 0
                var initialY = 0
                var initialTouchX: Float = 0.0f
                var initialTouchY: Float = 0.0f
                var moved = false
                override fun onTouch(view: View?, event: MotionEvent?): Boolean {
                    when (event?.action) {
                        MotionEvent.ACTION_DOWN -> {
                            initialX = floatingLayoutParams.x
                            initialY = floatingLayoutParams.y
                            //touch position
                            initialTouchX = event.getRawX()
                            initialTouchY = event.getRawY()
                            return true
                        }

                        MotionEvent.ACTION_UP -> {
                            if (!moved) {
                                Log.i(tag, "tapped")
                            }
                            moved = false
                            floatingLayoutParams.x =
                                initialX + (initialTouchX - event.getRawX()).toInt()
                            floatingLayoutParams.y =
                                initialY + (event.getRawY() - initialTouchY).toInt()
                            return true
                        }

                        MotionEvent.ACTION_MOVE -> {
                            moved = true
                            //calculate x and y coordinates
                            floatingLayoutParams.x =
                                initialX + (initialTouchX - event.getRawX()).toInt()
                            floatingLayoutParams.y =
                                initialY + (event.getRawY() - initialTouchY).toInt()
                            //update layout with view coordinates
                            windowManager.updateViewLayout(floatingToggle, floatingLayoutParams)
                            return true
                        }
                    }
                    return false
                }
            }
        )
    }

    fun stopFloatingWindow(){
        if(floatingToggle!=null){
            Log.i(tag, "removing floating window")
            windowManager.removeView(floatingToggle)
        }
    }

}