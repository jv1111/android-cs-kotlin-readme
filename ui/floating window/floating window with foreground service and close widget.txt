//SEPERATE CLASS APPROACH IS WRITTEN BELOW

first create a foreground service, check in on foreground service tutorial and modify the code

//RunningService.kt
class RunningService : Service() {

    private var LAYOUT_FLAG: Int? = null
    private lateinit var mFloatingView: View
    private lateinit var windowManager: WindowManager
    private lateinit var imageClose: ImageView
	...
	private fun startFloatingWindow() {
        //setup proper flag for different android versions
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            LAYOUT_FLAG = WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY
        } else {
            LAYOUT_FLAG = WindowManager.LayoutParams.TYPE_PHONE
        }

        //inflate
        mFloatingView = LayoutInflater.from(this).inflate(R.layout.floating_layout, null)
        val layoutParams = WindowManager.LayoutParams(
            WindowManager.LayoutParams.WRAP_CONTENT,
            WindowManager.LayoutParams.WRAP_CONTENT,
            LAYOUT_FLAG!!,
            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
            PixelFormat.TRANSLUCENT
        )

        //initial position
        layoutParams.gravity = Gravity.TOP or Gravity.RIGHT
        layoutParams.x = 0
        layoutParams.y = 100

        //create a close component
        val imageParams = WindowManager.LayoutParams(
            140,
            140,
            LAYOUT_FLAG!!,
            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
            PixelFormat.TRANSLUCENT
        )
        imageParams.gravity = Gravity.BOTTOM or Gravity.CENTER
        imageParams.y = 100

        windowManager = getSystemService(WINDOW_SERVICE) as WindowManager
        imageClose = ImageView(this)
        imageClose.setImageResource(R.drawable.ic_launcher_foreground)
        imageClose.visibility = View.INVISIBLE
        windowManager.addView(imageClose, imageParams)
        windowManager.addView(mFloatingView, layoutParams)
        mFloatingView.visibility = View.VISIBLE

        val height = windowManager.defaultDisplay.height
        val width = windowManager.defaultDisplay.width

        val tvWidget = mFloatingView.findViewById<TextView>(R.id.tvWidget)

        tvWidget.text = "running"

        tvWidget.setOnTouchListener(
            object : View.OnTouchListener {
                var initialX = 0
                var initialY = 0
                var initialTouchX:Float = 0.0f
                var initialTouchY:Float = 0.0f
                override fun onTouch(v: View, event: MotionEvent): Boolean {
                    when (event.action) {
                        MotionEvent.ACTION_DOWN -> {
                            imageClose.visibility = View.VISIBLE
                            initialX = layoutParams.x
                            initialY = layoutParams.y

                            //touch position
                            initialTouchX = event.getRawX()
                            initialTouchY = event.getRawY()

                            return true
                        }

                        MotionEvent.ACTION_UP -> {
                            imageClose.visibility = View.GONE
                            layoutParams.x = initialX+(initialTouchX-event.getRawX()).toInt()
                            layoutParams.y = initialY+(event.getRawY() - initialTouchY).toInt()
                            //remove widget
                            if(layoutParams.y>(height*0.6)){
                                stopSelf()
                            }
                            return true
                        }

                        MotionEvent.ACTION_MOVE -> {
                            //calculate x and y coordinates
                            layoutParams.x = initialX+(initialTouchX-event.getRawX()).toInt()
                            layoutParams.y = initialY+(event.getRawY()-initialTouchY).toInt()

                            //update layout with view coordinates
                            windowManager.updateViewLayout(mFloatingView, layoutParams)
                            if(layoutParams.y>(height*0.6)){
                                imageClose.setImageResource(R.drawable.ic_launcher_background)
                            }else{
                                imageClose.setImageResource(R.drawable.ic_launcher_foreground)
                            }
                            return true
                        }
                    }
                    return false
                }
            })
    }
	...
	private fun start() {
		...
        startForeground(1, notification)
        startFloatingWindow()
        isServiceRunning = true;
    }
	
	override fun onDestroy() {
        super.onDestroy()
        if(mFloatingView!=null){
            windowManager.removeView(mFloatingView)
        }
        if(imageClose!=null){
            windowManager.removeView(imageClose)
        }
        ...
    }
	
//floating_layout.xml
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <RelativeLayout
        android:id="@+id/layout_widget"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_centerHorizontal="true"
        android:layout_margin="30dp"
        >
        <TextView
            android:id="@+id/tvWidget"
            android:layout_width="120dp"
            android:layout_height="120dp"
            android:textSize="22dp"
            android:text="10"
            android:textStyle="bold"
            android:gravity="center"
            android:textColor="@color/white"
            android:background="@color/black"/>
    </RelativeLayout>

</RelativeLayout>

//MainActivity.kt
class MainActivity : AppCompatActivity() {
	...
    override fun onCreate(savedInstanceState: Bundle?) {
		...
        binding.openFloatingButton.setOnClickListener{
            startFloatingWindowService()
        }
    }
	...
	private fun startFloatingWindowService(){
        if(!Settings.canDrawOverlays(this@MainActivity)){
            getFloatingWindowPermission()
        }else{
            Log.i("myTag", "starting")
            //create an intent, convert enum to string because it is an enum
            Intent(applicationContext, RunningService::class.java).also{
                it.action = RunningService.Actions.START.toString()//call the action inside the RunningService
                startService(it)//start the service
                finish()
            }
        }
    }
	...
	private fun getFloatingWindowPermission(){
        //for the floating window
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){
            val intent = Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse("package:$packageName"))
            startActivityForResult(intent, 1)
        }
    }
	
	override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if(requestCode==1)
        {
            if(!Settings.canDrawOverlays(this@MainActivity)){
                Toast.makeText(this, "Permission denied by user", Toast.LENGTH_LONG).show()
            }
        }
    }
	...
}

//AndroidManifest.xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
	...
    <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
	...
	</activity>
        <service
            android:name=".background_service.RunningService"
            android:foregroundServiceType="connectedDevice"
            android:enabled="true"
            />
    </application>
</manifest>

//To create a tap function just add isMoved variable
tvWidget.setOnTouchListener(
            object : View.OnTouchListener {
                ...
                var isMoved = false 
				...
				MotionEvent.ACTION_UP -> {
                            imageClose.visibility = View.GONE
                            layoutParams.x = initialX+(initialTouchX-event.getRawX()).toInt()
                            layoutParams.y = initialY+(event.getRawY() - initialTouchY).toInt()

                            //touch event
                            if(!isMoved){
                                Log.i("myTag", "tapped")
								...
							}
							isMoved = false							
				}
				
				MotionEvent.ACTION_MOVE -> {
							...
                            isMoved = true
                            return true
                        }
				
				
//enable permission using switch
class YourFragment : Fragment() {

    private lateinit var swFloatingControl: Switch

    // ... Other fragment code ...

    private fun getFloatingWindowPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            val intent = Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse("package:${requireActivity().packageName}"))
            startActivityForResult(intent, 1)
        }
    }

    private fun hasOverlayPermission(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            Settings.canDrawOverlays(requireContext())
        } else {
            true // Permissions are not required before Android M
        }
    }

    // ... Other fragment code ...

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        swFloatingControl = view.findViewById(R.id.swFloatingControl)

        // Set the initial state of the switch based on permission status
        swFloatingControl.isChecked = hasOverlayPermission()

        swFloatingControl.setOnCheckedChangeListener { _, isChecked ->
            if (isChecked) {
                if (!hasOverlayPermission()) {
                    getFloatingWindowPermission()
                } else {
                    // Permission is already granted, perform your desired action here
                }
            } else {
                // Handle turning off the floating window feature
            }
        }
    }

    // ... Other fragment code ...

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == 1) {
            // Check if the user granted the permission
            if (hasOverlayPermission()) {
                // Permission granted, perform your desired action
                swFloatingControl.isChecked = true // Enable the switch
            } else {
                // Permission not granted, handle this situation accordingly
                swFloatingControl.isChecked = false // Disable the switch
            }
        }
    }
}

//or simply
private fun getFloatingWindowPermission(){
        //for the floating window
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){
            val intent = Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse("package:${requireActivity().packageName}"))
            startActivityForResult(intent, 1)
        }
    }

    private fun hasOverlayPermission(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            Settings.canDrawOverlays(requireContext())
        } else {
            true // Permissions are not required before Android M
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == 1) {
            // Check if the user granted the permission
            Log.i(tag, "on activity result")
            Log.i(tag, "has overlay ${hasOverlayPermission()}")
            binding.swFloatingControl.isChecked = hasOverlayPermission()
        }
    }
	
	
package com.example.smartkeyv3.service.FloatingWindow

import android.annotation.SuppressLint
import android.app.Service
import android.content.Context
import android.graphics.PixelFormat
import android.os.Build
import android.util.Log
import android.view.Gravity
import android.view.LayoutInflater
import android.view.MotionEvent
import android.view.View
import android.view.WindowManager
import android.widget.RelativeLayout
import com.example.smartkeyv3.R

class FloatingControl(private val context: Context) {

    private val tag = "myTag FloatingControl"
    private var LAYOUT_FLAG: Int? = null
    private var floatingToggle: View? = null
    private lateinit var windowManager: WindowManager

    @SuppressLint("ClickableViewAccessibility")
    fun startFloatingWindow() {
        //setup proper flag for different android versions
        LAYOUT_FLAG = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY
        } else {
            WindowManager.LayoutParams.TYPE_PHONE
        }

        //inflate
        floatingToggle = LayoutInflater.from(context).inflate(R.layout.floating_toggle, null)
        val floatingLayoutParams = WindowManager.LayoutParams(
            WindowManager.LayoutParams.WRAP_CONTENT,
            WindowManager.LayoutParams.WRAP_CONTENT,
            LAYOUT_FLAG!!,
            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
            PixelFormat.TRANSLUCENT
        )

        //initial position
        floatingLayoutParams.gravity = Gravity.TOP or Gravity.RIGHT
        floatingLayoutParams.x = 0
        floatingLayoutParams.y = 100

        windowManager = context.getSystemService(Service.WINDOW_SERVICE) as WindowManager
        windowManager.addView(floatingToggle, floatingLayoutParams)

        val height = windowManager.defaultDisplay.height
        val width = windowManager.defaultDisplay.width

        val control = floatingToggle!!.findViewById<RelativeLayout>(R.id.floatingControlLayout)

        control.setOnTouchListener(
            object : View.OnTouchListener {
                var initialX = 0
                var initialY = 0
                var initialTouchX: Float = 0.0f
                var initialTouchY: Float = 0.0f
                var moved = false
                override fun onTouch(view: View?, event: MotionEvent?): Boolean {
                    when (event?.action) {
                        MotionEvent.ACTION_DOWN -> {
                            initialX = floatingLayoutParams.x
                            initialY = floatingLayoutParams.y
                            //touch position
                            initialTouchX = event.getRawX()
                            initialTouchY = event.getRawY()
                            return true
                        }

                        MotionEvent.ACTION_UP -> {
                            if (!moved) {
                                Log.i(tag, "tapped")
                            }
                            moved = false
                            floatingLayoutParams.x =
                                initialX + (initialTouchX - event.getRawX()).toInt()
                            floatingLayoutParams.y =
                                initialY + (event.getRawY() - initialTouchY).toInt()
                            return true
                        }

                        MotionEvent.ACTION_MOVE -> {
                            moved = true
                            //calculate x and y coordinates
                            floatingLayoutParams.x =
                                initialX + (initialTouchX - event.getRawX()).toInt()
                            floatingLayoutParams.y =
                                initialY + (event.getRawY() - initialTouchY).toInt()
                            //update layout with view coordinates
                            windowManager.updateViewLayout(floatingToggle, floatingLayoutParams)
                            return true
                        }
                    }
                    return false
                }
            }
        )
    }

    fun stopFloatingWindow(){
        if(floatingToggle!=null){
            Log.i(tag, "removing floating window")
            windowManager.removeView(floatingToggle)
        }
    }

}