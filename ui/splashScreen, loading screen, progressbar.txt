dependency
lifecycleScope (search it on google for the latest version)
def lifecycle_version = "2.6.1"
// ViewModel
implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

1. Create a new empty activity, right click the app folder and create a new empty activity,
2. modify the manifest file to launch the app at the new activity e.g SplashActivity.kt
//Put the intent to the new activity
<activity
            android:name=".SplashScreen"
            android:exported="true" >
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity
            android:name=".MainActivity"
            android:exported="false"/>
			
3. in SplashScreenActivity.kt or The Activity.kt you created
package com.example.kotlinspashscreen

import android.content.Intent
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.view.WindowManager
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import android.view.WindowInsetsController

class SplashScreen : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_splash_screen)

        window.setFlags(
            WindowManager.LayoutParams.FLAG_FULLSCREEN,//HIDE THE STATUS BAR AND NAVIGATION BER = FULL SCREEN
            WindowManager.LayoutParams.FLAG_FULLSCREEN//JUST TO MAKE SURE THAT THE FLAG IS CLEAR (REDUNDANT FOR SOME REASON)
        )

		//launch the main activity after 1500L
        lifecycleScope.launch {
            delay(1500L)
            val intent = Intent(this@SplashScreen, MainActivity::class.java)
            startActivity(intent)
            finish()
        }
    }
}

4. progress bar sample
    <ProgressBar
        android:id="@+id/progressBar"
        style="?android:attr/progressBarStyle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:indeterminateTint="@android:color/white"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />