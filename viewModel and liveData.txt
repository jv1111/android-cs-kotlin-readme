 def lifecycle_version = "2.6.1"
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

//TestViewModel
class TestViewModel:ViewModel(){
	val number = 0//only used for the function, not neccessary
	val currentNumber: MutableLiveData<Int> by lazy{
		MutableLiveData<Int>()
	}
	
	val currentNumber: MutableLiveData<Int> by lazy{
		MutableLiveData<Int>()
	}
	
	fun registerUser(user: LocalUserModel){
        Log.i(tag, user.toString())
        //DO API CALL HERE
    }
	
}

//MainActivity
lateinit var viewmodel: TestViewModel

//MainActivity -> onCreate
viewModel = ViewModelProvider(this).get(TestViewModel::class.java)

//MainActivity
private fun incrementText(){
	btn.setOnclickListener{
		viewModel.currentNumber.value = ++viewModel.number//increment value in the viewModel
		viewModel.currentBoolean.value = viewModel.number % 2 == 0
	}
}

//Observer
//MainActivity -> onCreate
viewModel.currentNumber.observe{this, Observer{
	textView.text = it.toString()
	}
}

viewModel.currentBoolean.observe{this, Observer{
	tvBool.text = it.toString()
	}
}

//change liveData value
val x = MutableLiveData<Int>()
x.postValue(newValue);//works on background
x.value = newValue;//works on main thread

//Or without using by lazy
//TestViewModel
class TestViewModel:ViewModel(){
	val currentNumber = MutableLiveData(1)//1 is the default value or <Int>() = null
}


//WITH API DECLARATION (NEW)


