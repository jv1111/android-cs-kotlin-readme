//dependencies
   // Retrofit for network requests
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
    implementation("com.squareup.retrofit2:converter-gson:2.9.0")

    // Retrofit logging (optional, for debugging network requests)
    implementation("com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.2")

//### MANIFEST ###
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.INTERNET"/>

//Retrofit INSTANCE
import com.example.cwsmartdevicev3.global.Globals
import com.google.gson.GsonBuilder
import okhttp3.OkHttpClient
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.util.concurrent.TimeUnit

class RetrofitInstance {
    companion object{
        val baseUrl = "http://192.168.4.1/"
        fun getRetrofitInstance(): Retrofit{

            val httpClient = OkHttpClient.Builder()
                .connectTimeout(Globals.maxTimeout, TimeUnit.SECONDS)
                .readTimeout(Globals.maxTimeout, TimeUnit.SECONDS)
                .writeTimeout(Globals.maxTimeout, TimeUnit.SECONDS)
                .build()

            return Retrofit.Builder()
                .baseUrl(baseUrl)
                .addConverterFactory(GsonConverterFactory.create(GsonBuilder().create()))
                .client(httpClient)
                .build()
        }
    }
}

//Retrofit with http logging


//MODEL
import androidx.annotation.Keep

@Keep
data class MyModel(
    val someData: Int
)

//SERVICE
import retrofit2.Call
import retrofit2.http.Body
import retrofit2.http.GET
import retrofit2.http.Headers
import retrofit2.http.POST


interface ApiServiceSL {
    @GET("/")
    fun getData(): Call<MyModel>// MyModel is the return type
	
	@Headers("Content-Type: application/json")
    @POST("/updateModes")
    fun updateModes(@Body data: MyModel): Call<MyModel>

	//with single parameter
	@GET("/sample/api/Messaging/messages")
	fun getMessages(@Query("receiverId") receiverId: Int): Call<List<ApiModelChatMessages>>
	
	//with two paramters
	@GET("/sample/api/Messaging/messages")
	fun getMessages(
		@Query("receiverId") receiverId: Int,
		@Query("senderId") senderId: Int
	): Call<List<ApiModelChatMessages>>
}

//REPOSITORY
class RepoSL {
	interface callback<T>{//T is for generic data
		fun onSuccess(data: T)
        fun onFailed()
	}
	private val apiService = RetrofitInstance.getRetrofitInstance().create(ApiServiceSL::class.java)
	
	fun myCallFunction(cb: callback<MyModel>, mode: Int){
        val data = MyModel(someData = mode)
        val call = apiService.updateModes(data)
        call.enqueue(object : Callback<MyModel>{
            override fun onResponse(call: Call<ModelSLModesData>, response: Response<ModelSLModesData>) {
                val data = response.body()!!
                cb.onSuccess(data)
            }

            override fun onFailure(call: Call<ModelSLModesData>, t: Throwable) {
                cb.onFailed()
            }
        })
    }
}

//ViewModel
class MyViewModel(application: Application) : AndroidViewModel(application) {
	private val repository: RepoSL
	val listofData: MutableLiveData<List<User>> by lazy {
			MutableLiveData<List<User>>()
	}
    init {
		...//init something
    }
	
	fun myCallFunction(....){
		repository.myCallFunction(object : RepoSL.callback<MyModel>{
			//override the callback funtions here here
			...
		})
	}
}