//README FILE
1. Create a service class, code..
2. Create a running app class, code..
3. Add it to the manifest
4. add the request to the MainActivity.kt
5. add controls at .xml file
6. add a continuous function using handler

//SERVICE CLASS
package com.example.kotlinviewmodelwithdependencyinjection.ForegroundService

import android.app.Service
import android.content.Intent
import android.os.IBinder
import android.util.Log
import androidx.core.app.NotificationCompat
import com.example.kotlinviewmodelwithdependencyinjection.R
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.cancel
import kotlinx.coroutines.delay
import kotlinx.coroutines.isActive
import kotlinx.coroutines.launch

class RunningService: Service() {

    companion object{
        var isServiceRunning = false
    }

    override fun onBind(intent: Intent?): IBinder? {
        return null
    }

    enum class Actions{
        START, STOP
    }

    private val serviceScope = CoroutineScope(Dispatchers.Default)

    private fun start(){
        //create a foreground for notification
        val notification = NotificationCompat.Builder(this, "running_channel")
            .setSmallIcon(R.drawable.ic_launcher_foreground)
            .setContentTitle("Run is active")
            .setContentText("i am running")
            .build()
        startForeground(1, notification)
        //Start logging or the loop
        serviceScope.launch {
            while (isActive){
                Log.i("myTag", "I am running bud")
                delay(1000L)
            }
        }

        isServiceRunning = true;
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        when(intent?.action){
            Actions.START.toString() -> start()
            Actions.STOP.toString() -> stopSelf()
        }
        return super.onStartCommand(intent, flags, startId)
    }

    override fun onDestroy() {
        super.onDestroy()
        Log.i("myTag", "service destroyed")
        serviceScope.cancel()
        isServiceRunning = false;
    }

}

//RunningApp class
package com.example.notificationserviceforegroundservice

import android.app.Notification
import android.app.Service
import android.content.Intent
import android.os.Build
import android.os.Handler
import android.os.IBinder
import android.os.Looper
import android.util.Log
import androidx.annotation.RequiresApi

class RunningService: Service() {

    override fun onBind(intent: Intent?): IBinder? {
        return null//just to connect multiple components now it is null
    }

    // define actions
    enum class Actions {
        START, STOP
    }

    //add a runnable handler that will run every 1 second
    private val handler = Handler(Looper.getMainLooper())
    private val logRunnable = object : Runnable{
        override fun run() {
            Log.i("myTag", "I am running")
            handler.postDelayed(this, 1000)//delay every 1 second
        }

    }

    //create a start function
    @RequiresApi(Build.VERSION_CODES.O)
    private fun start(){
        //create a foreground for notification
        val notification = Notification.Builder(this, "running_channel")
            .setSmallIcon(R.drawable.ic_launcher_foreground)
            .setContentTitle("Run is active")
            .setContentText("i am running")
            .build()
        startForeground(1, notification)

        //Start logging or the loop
        handler.post(logRunnable)
    }

    //when the service start
    @RequiresApi(Build.VERSION_CODES.O)
    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        when(intent?.action){
            Actions.START.toString() -> start()
            Actions.STOP.toString() -> stopSelf()
        }
        return super.onStartCommand(intent, flags, startId)
    }

    override fun onDestroy() {
        super.onDestroy()
        Log.i("myTag", "service destroyed")
        handler.removeCallbacks(logRunnable)
    }
}

//MainActivity
package com.example.notificationserviceforegroundservice

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import androidx.core.app.ActivityCompat
import android.Manifest
import android.content.Intent
import android.os.Build
import android.util.Log
import android.widget.Button

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU){
            ActivityCompat.requestPermissions(
                this,
                arrayOf(Manifest.permission.POST_NOTIFICATIONS),
                0
            )
        }

        setContentView(R.layout.activity_main)

        val btnStart = findViewById<Button>(R.id.btnStart)
        val btnStop = findViewById<Button>(R.id.btnStop)

        btnStart.setOnClickListener{
            Log.i("myTag", "starting")
            //create an intent, convert it to string because it is an enum
            Intent(applicationContext, RunningService::class.java).also{
                it.action = RunningService.Actions.START.toString()//call the action inside the RunningService
                startService(it)//start the service
            }
        }

        btnStop.setOnClickListener{
            Log.i("myTag", "stopping")
            Intent(applicationContext, RunningService::class.java).also {
                it.action = RunningService.Actions.STOP.toString()
                startService(it)//this is just to keep the service running and the Action.STOPS above is the method that will stop the service itself
            }
        }

    }
}

//Manifest 
  <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
  <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
  
  <service android:name=".RunningService" android:foregroundServiceType="connectedDevice"/>
  
//FULL Manifest CODE
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />

    <application
        android:name=".RunningApp"
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.NotificationServiceForegroundService"
        tools:targetApi="31">
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <service android:name=".RunningService" android:foregroundServiceType="connectedDevice"/>
    </application>

</manifest>