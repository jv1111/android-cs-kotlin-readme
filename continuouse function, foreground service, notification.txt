//MANIFEST 
  <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
  <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
  
  <service android:name=".RunningService" android:foregroundServiceType="connectedDevice"/>
  
//FULL Manifest CODE
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />

    <application
        android:name=".RunningApp"
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.NotificationServiceForegroundService"
        tools:targetApi="31">
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <service android:name=".RunningService" android:foregroundServiceType="connectedDevice"/>
    </application>

</manifest>


//############################### SERVICE #################################
package com.example.revbotonlinepro2.service.floatingService

import android.app.Service
import android.content.Intent
import android.os.IBinder
import android.util.Log
import com.example.revbotonlinepro2.utils.NotificationHelper
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.cancel
import kotlinx.coroutines.delay
import kotlinx.coroutines.isActive
import kotlinx.coroutines.launch

class ServiceFloatingWindow : Service() {
    companion object {
        var isServiceRunning = false
    }

    enum class Actions{
        START, STOP
    }

    private val serviceScope = CoroutineScope(Dispatchers.Default)
    private fun runningService(){
        serviceScope.launch {
            while (isActive){
                Log.i("myTag", "I am running bud")
                delay(1000L)
            }
        }
    }

    override fun onBind(intent: Intent?): IBinder? {
        return null
    }

   private fun start(){
       Log.i("myTag, ","startFunction")
       NotificationHelper(this).startNotification()
       runningService()
       isServiceRunning = true;
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.i("myTag", "onstartcommand")
        Log.i("myTag", intent?.action.toString())
        when(intent?.action){
            Actions.START.toString() -> start()
            Actions.STOP.toString() -> stopSelf()
        }
        return super.onStartCommand(intent, flags, startId)
    }

    override fun onDestroy() {
        super.onDestroy()
        serviceScope.cancel()
        isServiceRunning = false
    }
}

//###################################### NotificationHelper #########################
package com.example.revbotonlinepro2.utils

import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.Service
import android.content.Context
import android.content.Intent
import android.os.Build
import androidx.core.app.NotificationCompat
import com.example.revbotonlinepro2.R
import com.example.revbotonlinepro2.config.Config
import com.example.revbotonlinepro2.view.activities.MainActivity

class NotificationHelper(private val context: Context) {
    fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channelId = "running_channel_id"
            val channelName = "Foreground Service Channel"
            val channelDescription = "Channel for Foreground Service"
            val importance = NotificationManager.IMPORTANCE_DEFAULT
            val channel = NotificationChannel(channelId, channelName, importance).apply {
                description = channelDescription
            }
            val notificationManager: NotificationManager =
                context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(channel)
        }
    }

    fun startNotification() {
        createNotificationChannel()

        val notificationIntent = Intent(context, MainActivity::class.java)
        val pendingIntent = PendingIntent.getActivity(
            context, 0, notificationIntent, PendingIntent.FLAG_IMMUTABLE
        )

        val notification = NotificationCompat.Builder(context, "running_channel_id")
            .setSmallIcon(R.drawable.ic_launcher_foreground)
            .setContentTitle("Title")
            .setContentText("text")
            .setContentIntent(pendingIntent)
            .build()

        (context as Service).startForeground(Config.FOREGROUND_MESSENGER_ID, notification)
    }
}


//############################# ACTIVITY ########################
    private fun checkPermission(){
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU){
            ActivityCompat.requestPermissions(
                this,
                arrayOf(Manifest.permission.POST_NOTIFICATIONS),
                0
            )
        }
    }
	
	
    private fun startFloatingMessenger(){
        if(!ServiceFloatingWindow.isServiceRunning){
            Log.i("myTag", "starting the service")
            Intent(applicationContext, ServiceFloatingWindow::class.java).also {
                it.action = ServiceFloatingWindow.Actions.START.toString()
                startService(it)
            }
        }
    }
    private fun stopFloatingMessenger(){
        Intent(this@MainActivity, ServiceFloatingWindow::class.java).also {
            it.action = ServiceFloatingWindow.Actions.STOP.toString()
            startService(it)
        }
    }
